/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface ITaxationInterface extends utils.Interface {
  functions: {
    "collectionFrequencyOf(uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositOf(uint256)": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "foreclosed(uint256)": FunctionFragment;
    "foreclosureTime(uint256)": FunctionFragment;
    "lastCollectionTimeOf(uint256)": FunctionFragment;
    "taxCollectedSinceLastTransferOf(uint256)": FunctionFragment;
    "taxOwed(uint256)": FunctionFragment;
    "taxOwedSince(uint256,uint256)": FunctionFragment;
    "taxRateOf(uint256)": FunctionFragment;
    "withdrawDeposit(uint256,uint256)": FunctionFragment;
    "withdrawableDeposit(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collectionFrequencyOf"
      | "deposit"
      | "depositOf"
      | "exit"
      | "foreclosed"
      | "foreclosureTime"
      | "lastCollectionTimeOf"
      | "taxCollectedSinceLastTransferOf"
      | "taxOwed"
      | "taxOwedSince"
      | "taxRateOf"
      | "withdrawDeposit"
      | "withdrawableDeposit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collectionFrequencyOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "foreclosed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "foreclosureTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastCollectionTimeOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taxCollectedSinceLastTransferOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taxOwed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taxOwedSince",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "taxRateOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDeposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableDeposit",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectionFrequencyOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "foreclosed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "foreclosureTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCollectionTimeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxCollectedSinceLastTransferOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taxOwed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxOwedSince",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taxRateOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableDeposit",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ITaxation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITaxationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collectionFrequencyOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      tokenId_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exit(
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    foreclosed(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    foreclosureTime(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastCollectionTimeOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    taxCollectedSinceLastTransferOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    taxOwed(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
    >;

    taxOwedSince(
      tokenId_: BigNumberish,
      time_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { taxDue: BigNumber }>;

    taxRateOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawDeposit(
      tokenId_: BigNumberish,
      wei_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawableDeposit(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  collectionFrequencyOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    tokenId_: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exit(
    tokenId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  foreclosed(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  foreclosureTime(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastCollectionTimeOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  taxCollectedSinceLastTransferOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  taxOwed(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
  >;

  taxOwedSince(
    tokenId_: BigNumberish,
    time_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  taxRateOf(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawDeposit(
    tokenId_: BigNumberish,
    wei_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawableDeposit(
    tokenId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    collectionFrequencyOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(tokenId_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    foreclosed(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    foreclosureTime(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastCollectionTimeOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxCollectedSinceLastTransferOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxOwed(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
    >;

    taxOwedSince(
      tokenId_: BigNumberish,
      time_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxRateOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawDeposit(
      tokenId_: BigNumberish,
      wei_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawableDeposit(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    collectionFrequencyOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      tokenId_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    foreclosed(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    foreclosureTime(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastCollectionTimeOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxCollectedSinceLastTransferOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxOwed(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxOwedSince(
      tokenId_: BigNumberish,
      time_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxRateOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawDeposit(
      tokenId_: BigNumberish,
      wei_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawableDeposit(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collectionFrequencyOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      tokenId_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      tokenId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    foreclosed(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    foreclosureTime(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastCollectionTimeOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxCollectedSinceLastTransferOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxOwed(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxOwedSince(
      tokenId_: BigNumberish,
      time_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxRateOf(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawDeposit(
      tokenId_: BigNumberish,
      wei_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawableDeposit(
      tokenId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
