/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface RemittanceInterface extends utils.Interface {
  functions: {
    "outstandingRemittances(address)": FunctionFragment;
    "withdrawOutstandingRemittance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "outstandingRemittances"
      | "withdrawOutstandingRemittance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "outstandingRemittances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOutstandingRemittance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "outstandingRemittances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOutstandingRemittance",
    data: BytesLike
  ): Result;

  events: {
    "LogOutstandingRemittance(address)": EventFragment;
    "LogRemittance(uint8,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogOutstandingRemittance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemittance"): EventFragment;
}

export interface LogOutstandingRemittanceEventObject {
  seller: string;
}
export type LogOutstandingRemittanceEvent = TypedEvent<
  [string],
  LogOutstandingRemittanceEventObject
>;

export type LogOutstandingRemittanceEventFilter =
  TypedEventFilter<LogOutstandingRemittanceEvent>;

export interface LogRemittanceEventObject {
  trigger: number;
  recipient: string;
  amount: BigNumber;
}
export type LogRemittanceEvent = TypedEvent<
  [number, string, BigNumber],
  LogRemittanceEventObject
>;

export type LogRemittanceEventFilter = TypedEventFilter<LogRemittanceEvent>;

export interface Remittance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RemittanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    outstandingRemittances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawOutstandingRemittance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  outstandingRemittances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawOutstandingRemittance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    outstandingRemittances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawOutstandingRemittance(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LogOutstandingRemittance(address)"(
      seller?: string | null
    ): LogOutstandingRemittanceEventFilter;
    LogOutstandingRemittance(
      seller?: string | null
    ): LogOutstandingRemittanceEventFilter;

    "LogRemittance(uint8,address,uint256)"(
      trigger?: BigNumberish | null,
      recipient?: string | null,
      amount?: BigNumberish | null
    ): LogRemittanceEventFilter;
    LogRemittance(
      trigger?: BigNumberish | null,
      recipient?: string | null,
      amount?: BigNumberish | null
    ): LogRemittanceEventFilter;
  };

  estimateGas: {
    outstandingRemittances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawOutstandingRemittance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    outstandingRemittances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawOutstandingRemittance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
