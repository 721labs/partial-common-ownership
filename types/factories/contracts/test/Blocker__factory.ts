/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Blocker,
  BlockerInterface,
} from "../../../contracts/test/Blocker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddress_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "collect",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newValuation_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentValuation_",
        type: "uint256",
      },
    ],
    name: "takeoverLease",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526001600060146101000a81548160ff02191690831515021790555034801561002b57600080fd5b5060405161059d38038061059d833981810160405281019061004d91906100f6565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610123565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100c382610098565b9050919050565b6100d3816100b8565b81146100de57600080fd5b50565b6000815190506100f0816100ca565b92915050565b60006020828403121561010c5761010b610093565b5b600061011a848285016100e1565b91505092915050565b61046b806101326000396000f3fe60806040526004361061002d5760003560e01c80634f54e81914610089578063e5225381146100a557610084565b3661008457600060149054906101000a900460ff1615610082576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610079906102b0565b60405180910390fd5b005b600080fd5b6100a3600480360381019061009e919061030b565b6100bc565b005b3480156100b157600080fd5b506100ba6101dd565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16348484846040516024016101099392919061036d565b6040516020818303038152906040527f4f54e819000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610193919061041e565b60006040518083038185875af1925050503d80600081146101d0576040519150601f19603f3d011682016040523d82523d6000602084013e6101d5565b606091505b505050505050565b60008060146101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632545ab7f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561025f57600080fd5b505af1158015610273573d6000803e3d6000fd5b50505050565b600082825260208201905092915050565b50565b600061029a600083610279565b91506102a58261028a565b600082019050919050565b600060208201905081810360008301526102c98161028d565b9050919050565b600080fd5b6000819050919050565b6102e8816102d5565b81146102f357600080fd5b50565b600081359050610305816102df565b92915050565b600080600060608486031215610324576103236102d0565b5b6000610332868287016102f6565b9350506020610343868287016102f6565b9250506040610354868287016102f6565b9150509250925092565b610367816102d5565b82525050565b6000606082019050610382600083018661035e565b61038f602083018561035e565b61039c604083018461035e565b949350505050565b600081519050919050565b600081905092915050565b60005b838110156103d85780820151818401526020810190506103bd565b838111156103e7576000848401525b50505050565b60006103f8826103a4565b61040281856103af565b93506104128185602086016103ba565b80840191505092915050565b600061042a82846103ed565b91508190509291505056fea2646970667358221220424e93a17d10b136471981ff3a93353f333760c98e9d2ef24a3273b4b985a87864736f6c634300080c0033";

type BlockerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlockerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Blocker__factory extends ContractFactory {
  constructor(...args: BlockerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    contractAddress_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Blocker> {
    return super.deploy(contractAddress_, overrides || {}) as Promise<Blocker>;
  }
  override getDeployTransaction(
    contractAddress_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(contractAddress_, overrides || {});
  }
  override attach(address: string): Blocker {
    return super.attach(address) as Blocker;
  }
  override connect(signer: Signer): Blocker__factory {
    return super.connect(signer) as Blocker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlockerInterface {
    return new utils.Interface(_abi) as BlockerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Blocker {
    return new Contract(address, _abi, signerOrProvider) as Blocker;
  }
}
