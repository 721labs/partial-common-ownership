/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Blocker,
  BlockerInterface,
} from "../../../contracts/test/Blocker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddress_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "collect",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newValuation_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentValuation_",
        type: "uint256",
      },
    ],
    name: "takeoverLease",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040526000805460ff60a01b1916600160a01b17905534801561002357600080fd5b506040516102ec3803806102ec83398101604081905261004291610067565b600080546001600160a01b0319166001600160a01b0392909216919091179055610097565b60006020828403121561007957600080fd5b81516001600160a01b038116811461009057600080fd5b9392505050565b610246806100a66000396000f3fe60806040526004361061002d5760003560e01c80634f54e81914610071578063e52253811461008457600080fd5b3661006c57600054600160a01b900460ff161561006a5760405162461bcd60e51b8152602060048201526000602482015260440160405180910390fd5b005b600080fd5b61006a61007f3660046101a9565b610099565b34801561009057600080fd5b5061006a610144565b6000546040516024810185905260448101849052606481018390526001600160a01b0390911690349060840160408051601f198184030181529181526020820180516001600160e01b0316634f54e81960e01b179052516100fa91906101d5565b60006040518083038185875af1925050503d8060008114610137576040519150601f19603f3d011682016040523d82523d6000602084013e61013c565b606091505b505050505050565b6000805460ff60a01b198116825560408051632545ab7f60e01b815290516001600160a01b0390921692632545ab7f9260048084019382900301818387803b15801561018f57600080fd5b505af11580156101a3573d6000803e3d6000fd5b50505050565b6000806000606084860312156101be57600080fd5b505081359360208301359350604090920135919050565b6000825160005b818110156101f657602081860181015185830152016101dc565b81811115610205576000828501525b50919091019291505056fea264697066735822122053b04a1f53657996e2b31f8dffe562169a843ea1d88ce1d438d447ccb384da6664736f6c634300080c0033";

type BlockerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlockerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Blocker__factory extends ContractFactory {
  constructor(...args: BlockerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    contractAddress_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Blocker> {
    return super.deploy(contractAddress_, overrides || {}) as Promise<Blocker>;
  }
  override getDeployTransaction(
    contractAddress_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(contractAddress_, overrides || {});
  }
  override attach(address: string): Blocker {
    return super.attach(address) as Blocker;
  }
  override connect(signer: Signer): Blocker__factory {
    return super.connect(signer) as Blocker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlockerInterface {
    return new utils.Interface(_abi) as BlockerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Blocker {
    return new Contract(address, _abi, signerOrProvider) as Blocker;
  }
}
